//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contact")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Binary(16)")]
    pub id: Vec<u8>,
    pub name: String,
    pub business_name: String,
    pub phone: String,
    pub description: String,
    #[sea_orm(column_type = "Binary(16)")]
    pub contact_type_id: Vec<u8>,
    pub created_at: Option<DateTimeUtc>,
    pub updated_at: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contact_type::Entity",
        from = "Column::ContactTypeId",
        to = "super::contact_type::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    ContactType,
    #[sea_orm(has_many = "super::transaction::Entity")]
    Transaction,
    #[sea_orm(has_many = "super::user_contact::Entity")]
    UserContact,
}

impl Related<super::contact_type::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContactType.def()
    }
}

impl Related<super::transaction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transaction.def()
    }
}

impl Related<super::user_contact::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserContact.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_contact::Relation::User.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_contact::Relation::Contact.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
